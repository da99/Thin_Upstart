
describe "Thin_Upstart create" do
  
  before { reset }
  
  it "creates main app file: upstart/{{name}}.conf" do
    chdir {
      Thin_Upstart { |o| o.name "My-Apps" }
      should_mustache "name", "My-Apps", "upstart/My-Apps.conf"
    }
  end

  it "creates app file for each file: upstart/{{name}}-{{app}}.conf" do
    chdir {
      Thin_Upstart { |o| o.name "My" }
      %w{ Hi Hello }.each { |n|
        should_mustache "app", n, "upstart/My-#{n}.conf"
      }
    }
  end

  it "prepends to each file: '# Generated by Thin_Upstart'" do
    target = "# Generated by Thin_Upstart (Ruby gem)"
    chdir {
      Thin_Upstart { |o| o.name "My" }
      File.read("upstart/My.conf")[target].should == target
      File.read("upstart/My-Hi.conf")[target].should == target
      File.read("upstart/My-Hello.conf")[target].should == target
    }
  end
  
  it "raise ArgumentError if no templates are found." do
    chdir {
      lambda {
        Thin_Upstart { |o| o.templates "ignored" }
      }.should.raise(ArgumentError)
      .message.should.match %r!No templates found in: #{`pwd`.strip}/ignored!
    }
  end
  
  it "raises ArgumentError if no apps are found." do
    target = File.expand_path("#{D}/..") 
    chdir {
      lambda {
        Thin_Upstart { |o| 
          o.apps target
        }
      }.should.raise(ArgumentError)
      .message.should.match %r!No apps found in: #{target}!
    }
  end

  it "ignores app with no .yml file" do
    name = "Ignored"
    chdir {
      `mkdir apps/#{name}`
      Thin_Upstart
      Dir.glob("upstart/*").detect { |f| f[name] }
      .should ==  nil
    }
  end

end # === Thin_Upstart create


